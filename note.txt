useffect :
useEffect trong React l√† m·ªôt hook d√πng ƒë·ªÉ x·ª≠ l√Ω c√°c ‚Äút√°c v·ª• ph·ª•‚Äù (side effects) trong function component.
useEffect(setup, dependencies?)
setup l√† function 
dependensies cos 2 lo·∫°i l√† kh√¥ng truy·ªÅn tham s·ªë v√† c√≥ truy·ªÅn n·∫øu kh√¥ng truy·ªÅn th√¨ n√≥ s·∫Ω ch·∫°y 1 l·∫ßn khi comnennt mouting c√≤n n·∫øu c√≥ truy·ªÅn th√¨ n√≥ s·∫Ω ch·∫°y khi value ƒë∆∞·ª£c thay ƒë·ªïi


useState: useState trong React l√† m·ªôt hook d√πng ƒë·ªÉ t·∫°o v√† qu·∫£n l√Ω state (tr·∫°ng th√°i) trong function component.
const [state, setState] = useState(initialState)
initialState:l√† tham s·ªë ƒë·∫ßu ti√™n ƒë∆∞·ª£c truy·ªÅn v√†o state
state:l√† gi√° tr·ªã c·ªßa useState 
setState:d√πng ƒë·ªÉ thay ƒë·ªïi state khi s√©ttate thay ƒë·ªïi th√¨ state thay ƒë·ªïi v√† g√°n v√†o useState


=================

 ƒë·ªìng b·ªô: l√† code s·∫Ω ch·∫°y t·ª´ tr√™n xu·ªëng n·∫øu code tr√™n ch·∫°y ch∆∞a xong th√¨ ƒë·ª£i ch·∫°y xong r·ªìi ch·∫°y code d∆∞·ªõi


b·∫•t ƒë·ªìng b·ªô: l√† n·∫øu code tr√™n ch·∫°y ch∆∞a xong th√¨ ch·∫°y code d∆∞·ªõi tr∆∞·ªõc r·ªìi khi code tr√™n ch·∫°y xong th√¨ in ra

nh·ªØng th·ª© g√¨ l√† b·∫•t ƒë·ªìng b·ªô
1. C√°c API li√™n quan t·ªõi th·ªùi gian
setTimeout(callback, ms) ‚Üí ch·∫°y callback sau ms mili gi√¢y.
setInterval(callback, ms) ‚Üí l·∫∑p l·∫°i callback sau m·ªói ms mili gi√¢y.

2. AJAX / Fetch API / HTTP request
fetch(url)
XMLHttpRequest (c≈© h∆°n, √≠t d√πng trong React).

3. Promise:khi l√†m vi·ªác c√≥ b·∫•t ƒë·ªìng b·ªô th√¨ k·∫øt qu·∫£ tr·∫£ v·ªÅ s·∫Ω l√† promise
Khi c√¥ng vi·ªác th√†nh c√¥ng g·ªçi resolve.
Khi c√¥ng vi·ªác th·∫•t b·∫°i g·ªçi reject.
M·ªôt Promise c√≥ 3 tr·∫°ng th√°i ch√≠nh:
pending (ƒëang ch·ªù) ‚Üí l√∫c m·ªõi t·∫°o, ch∆∞a c√≥ k·∫øt qu·∫£.
fulfilled (ho√†n th√†nh, resolved) ‚Üí ƒë√£ th√†nh c√¥ng, c√≥ d·ªØ li·ªáu.
rejected (th·∫•t b·∫°i) ‚Üí c√≥ l·ªói x·∫£y ra.

.then(): khi tr·∫£ v·ªÅ s·ªØ li·ªáu th√†nh c√¥ng th√¨ s·∫Ω ch·∫°y code ·ªü ƒë√¢y
.catch(): khi tr·∫£ v·ªÅ s·ªØ li·ªáu th·∫•t b·∫°i th√¨ s·∫Ω ch·∫°y code ·ªü ƒë√¢y
.finally(): khi lu√¥n ch·∫°y cu·ªëi c√πng k·ªÉ c·∫£ th√†nh c√¥ng hay th·∫•t b·∫°i
async/await (c≈©ng d·ª±a tr√™n Promise).

4. Event listeners (s·ª± ki·ªán)
addEventListener("click", callback)
S·ª± ki·ªán b√†n ph√≠m, chu·ªôt, DOM events ‚Üí callback ch·ªâ ch·∫°y khi s·ª± ki·ªán x·∫£y ra.


api l√† g√¨: api l√† c·∫ßu n·ªëi gi·ªØa frontend v√† backend n·∫øu frontend mu·ªën l·∫•y d·ªØ li·ªáu th√¨ s·∫Ω g·ªçi ƒë·∫øn api xong api g·ªçi backend 
backend tr·∫£ d·ªØ li·ªáu cho api xong api tr·∫£ d·ªØ li·ªáu v·ªÅ cho frontend

request l√† g√¨: l√† g·ª≠i y√™u c·∫ßu frontend g·ª≠i ƒë·∫øn backend th√¥ng qua api nh∆∞ mu·ªën l√†m l√†m l·∫•y g√¨ 
c√≥ nh·ªØng g√¨:
-method: l√† ph∆∞∆°ng th·ª©c ƒë·ªÉ backend bi·∫øt mu·ªën l√†m g√¨
get: l·∫•y d·ªØ li·ªáu
post: g·ª≠i d·ªØ li·ªáu
put: c·∫≠p nh·∫≠p d·ªØ li·ªáu
delete: x√≥a d·ªØ li·ªáu
-url c·ªßa api: url nghƒ©a l√† n·∫øu frontend g·ªçi ƒë·∫øn api th√¨ ph·∫£i d√πng ·ªßl n√†y ƒë·ªÉ bi·∫øt c·∫ßn l·∫•y g√¨ l√†m g√¨ 
trong url c√≥ th√™m
https://api.example.com/users/123/posts
Domain: api.example.com
Path: /users/123/posts
path l√† t·∫•t c·∫£ ph√≠a sau domain c√≤n params c√≥ th·ªÉ c√≥ c√≥ th·ªÉ kh√¥ng n·∫øu c√≥ ph·∫£i b√™n trong path n·∫øu c√≥ th√¨ c√≥ nghƒ©a l√† mu·ªën ch·ªâ ƒë·ªãnh l·∫•y 1 th·ª© c·ª• th·ªÉ c√≤n n·∫øu kh√¥ng th√¨ l·∫•y to√†n b·ªô n√™n kh√¥ng c·∫ßn params
query: n·∫±m sau ?, ƒë·ªÉ l·ªçc, s·∫Øp x·∫øp, ph√¢n trang.
param: d√πng ƒë·ªÉ khi ng∆∞·ªùi d√πng click v√†o b√†i posh c√≥ id l√† 10 th√¨ url s·∫Ω hi·ªán s·ªë 10 ·ªü cu·ªëi nh∆∞ trong route detail:id th√¨ id ch√≠nh l√† params n·∫øu detail/1 th√¨ ch√≠nh l√† params.id 1
n·∫øu method l√† post ho·∫∑c put s·∫Ω c√≥ th√™m body trong request

1. GET request (ch·ªâ l·∫•y d·ªØ li·ªáu): 
GET /posts/7    
üëâ Server tr·∫£ v·ªÅ b√†i vi·∫øt id=7.

2. POST request (t·∫°o m·ªõi d·ªØ li·ªáu)
Khi b·∫°n mu·ªën th√™m m·ªôt b√†i vi·∫øt, b·∫°n ph·∫£i g·ª≠i n·ªôi dung n√≥ trong body.
POST /posts
Content-Type: application/json
{
  "title": "B√†i vi·∫øt m·ªõi",
  "content": "N·ªôi dung b√†i vi·∫øt"
}
üëâ Server nh·∫≠n body, l∆∞u v√†o DB, r·ªìi tr·∫£ v·ªÅ b√†i vi·∫øt m·ªõi c√≥ id.

3. PUT request (c·∫≠p nh·∫≠t to√†n b·ªô d·ªØ li·ªáu)
Khi b·∫°n mu·ªën c·∫≠p nh·∫≠t l·∫°i to√†n b·ªô d·ªØ li·ªáu c·ªßa 1 b√†i vi·∫øt.
PUT /posts/7
Content-Type: application/json
{
  "title": "Ti√™u ƒë·ªÅ ƒë√£ ƒë·ªïi",
  "content": "N·ªôi dung m·ªõi"
}
üëâ B√†i vi·∫øt c√≥ id=7 s·∫Ω b·ªã ghi ƒë√® to√†n b·ªô n·ªôi dung.

4. PATCH request (c·∫≠p nh·∫≠t m·ªôt ph·∫ßn d·ªØ li·ªáu)
Kh√°c v·ªõi PUT, PATCH ch·ªâ thay ƒë·ªïi 1 s·ªë tr∆∞·ªùng.
PATCH /posts/7
Content-Type: application/json
{
  "title": "Ch·ªâ ƒë·ªïi ti√™u ƒë·ªÅ th√¥i"
}
üëâ Ch·ªâ title thay ƒë·ªïi, c√≤n content gi·ªØ nguy√™n.

üëâ T√≥m l·∫°i:
GET: kh√¥ng c√≥ body (ch·ªâ l·∫•y d·ªØ li·ªáu).
POST / PUT / PATCH: s·∫Ω c√≥ body ƒë·ªÉ g·ª≠i d·ªØ li·ªáu m·ªõi ho·∫∑c d·ªØ li·ªáu c·∫≠p nh·∫≠t.

responsse l√† g√¨:Response ch√≠nh l√† k·∫øt qu·∫£ m√† server tr·∫£ v·ªÅ sau khi x·ª≠ l√Ω xong request
c√≥ nh·ªØng g√¨:

- data:
JSON ‚Üí ph·ªï bi·∫øn nh·∫•t trong API (vd: { "id": 1, "title": "Hello" })
Text (chu·ªói)
HTML (n·∫øu l√† response c·ªßa website)
File (pdf, h√¨nh ·∫£nh, video‚Ä¶)

- http status code: m√£ tr·∫°ng th√°i
c√°c m√£ http:
200 OK ‚Üí th√†nh c√¥ng
201 Created ‚Üí t·∫°o m·ªõi th√†nh c√¥ng
400 Bad Request ‚Üí request sai ƒë·ªãnh d·∫°ng/tham s·ªë
401 Unauthorized ‚Üí ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c sai token
404 Not Found ‚Üí kh√¥ng t√¨m th·∫•y t√†i nguy√™n
500 Internal Server Error ‚Üí l·ªói server


fetch s·∫Ω tr·∫£ v·ªÅ 1 promsie
c√≥ th·ªÉ .then ƒë∆∞·ª£c 
  .then(callback) 
m√† callback n√†y s·∫Ω l√† 1 function ƒë∆∞·ª£c nh·∫≠n data t·ª´ l·∫ßn then tr∆∞·ªõc ƒë√≥



fetch(api).then((data)=>{
    //xu ly data
 return data.json()
    
}).then(data=>setState(data))


fetch("https://api.example.com/users/123", {
  method: "PUT", // method: y√™u c·∫ßu l√† c·∫≠p nh·∫≠t
  headers: {
    "Content-Type": "application/json", // cho server bi·∫øt d·ªØ li·ªáu l√† JSON
  },
  body: JSON.stringify({
    name: "T√πng",
    email: "tung@example.com",
  }), // body: d·ªØ li·ªáu g·ª≠i k√®m
})
  .then((res) => res.json()) // ƒë·ªçc data tr·∫£ v·ªÅ
  .then((data) => console.log("Response:", data))
  .catch((error) => console.error("Error:", error));
  ‚ö†Ô∏è L∆∞u √Ω: N·∫øu API tr·∫£ v·ªÅ text ho·∫∑c XML, b·∫°n s·∫Ω d√πng response.text() ho·∫∑c response.blob() thay v√¨ response.json().